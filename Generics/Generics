Intro:
->When we develop a software, we will eventually run into bugs(Compile/Runtime).
1.Compile time bugs can be fixed using our compiler messages.
2.Runtime bugs won't reach the surface everytime and it maybe late to fix the bug
    as we integrate more code into our software and it will be hard to fix and may also lead to removal of some code.

->Generics add more stability to our code and make bugs easily detectable at compile time.

Why using generics?
->We are providing types(classes or interfaces) as a parameter to classes or methods while defining.
->We can reuse the same code for a different input(different classes).

Benefits:
->Stronger type checks at compile time.
->No more type casting as we provide Type(T) while creating references.
        List list = new ArrayList();
        list.add("Hey");
        String s = list.get(0);

    As we don't specify Type, the list is considered to take any value(Integer,String,..) it means we are considering the values as Object.
    so we need to convert Object to String(Type Casting is Needed)
        String s = (String) list.get(0);
 It's better to provide Type(No Type Casting),
        List<String> list = new ArrayList<>();
        list.add("Hey");
        String s = list.get(0);

Normal Class:

Class className{
    public String printer(String Ip){
        return Ip;
    }
}

Generic Version:

class className<T>{
    public T printer(T Ip){
        return Ip;
    }
}
interface interfaceName<T>{
    T print(T t);
}

Multiple Type Parameters:

class className<T,S>{

    public T printer(T t){
        return t;
    }

    public S printer1(S s){
        return s;
    }
}

Raw Types:
without any Type Argument,
List list = new ArrayList();

Assigning parameterized type to raw type is allowed:
        List<String> stringList = new ArrayList<>();
        List rawList = stringList;

But assigning raw to parameterized type will throw warning,
        List rawList1 = new ArrayList();           //raw type
        List<Integer> intList = rawList1;          // unchecked conversion

        For example:
        -> There are coloured boxes used to store balls of same colour and there are black coloured boxes
            which can be used to store any coloured balls.
        -> We can transfer all balls from coloured boxes to black coloured box.
        -> We can also transfer all balls from black box to coloured boxes,
            but we need to check the balls before putting in.

Also warning when we instantiate

        List<String> stringList = new ArrayList<>();
        List rawList = stringList;
        rawList.add("hello");                      // unchecked call

Bounded Type Parameters:
-> Limiting the type of Type Arguments in parameterized Types.

class BoundedGenerics<T extends Number>{

}

Multiple Bounds:
->Order should be maintained class > interface > interface
class A{

}
interface B{

}
interface C{

}

class D<T extends A & B & C>{

}

Wildcards:
-> (?) = Unknown Types
Upper Bounded Wildcards -> Unknown Type could be a specific type or any subclass ( List<? extends Number> list)
Lower Bounded Wildcards -> Unknown Type should be a specific type or supertype of the specific Type( List<? super Integer> list)
                            it means we can use List<Integer>, List<Number> and List<Object>.

UnBounded Wildcards:

We know Object is a parent or super class of Integers,String,Float,Double,..
But List<Object> and List<Integer>,... are different

        public static void printList(List<Object> list) {
                for (Object obj : list)
                    System.out.println(elem + " ");
                System.out.println();
        }

        List<Object> Objectlist = new ArrayList<>();
        Objectlist.add(1);
        Objectlist.add(1.0f);
        Objectlist.add("hello");
        printList(Objectlist);

        List<Integer> integers = new ArrayList<>();
        integers.add(1);
        integers.add(2);
        integers.add(3);
        printList(integers);            // error, Cannot pass List<Integers> to a method required type of List<Object>


        Solution:

        public static void printList(List<?> list) {            //List<?> Can take any Type
                for (Object obj : list)
                     System.out.println(elem + " ");
                System.out.println();
        }

Why primitives not allowed?

When bytecode is generated, it contains normal classes,methods and interfaces, Therefore it doesn't know the type T and replace with Object,
primitive datatype doesn't extend Object Class but wrapper class does.