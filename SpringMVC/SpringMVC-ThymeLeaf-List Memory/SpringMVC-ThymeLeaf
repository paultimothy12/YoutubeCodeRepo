1.Add Thymeleaf dependency:
        <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
2.Create .html files in templates folder in resources directory,
    -example: testFile.html
        Add <html lang="en" xmlns:th=http://www.thymeleaf.org>

    -create Mappings class and add String constants
        example: public static final String TEST_FILE = "testFile";

3.Create a WebConfig.java File,
        Mappings and Views are simplified in using thymeleaf as View Technology.

        @Configuration
        public class WebConfig implements WebMvcConfigurer {
            @Override
            public void addViewControllers(ViewControllerRegistry registry) {
                registry.addViewController(Mappings.TEST_FILE).setViewName(ViewNames.TESTFILE);
                registry.addViewController(Mappings.REDIRECT_PAGE).setViewName(ViewNames.REDIRECT_PAGE);
            }
        }
4.Create a DemoController.java File,
        @Controller
        public class DemoController {
            @GetMapping(Mappings.TEST_FILE)
            public String testFile(){
                return ViewNames.TEST_FILE;
            }
        }
    To view those files,
    http://localhost:8080/testFile
    http://localhost:8080/redirectPage

    DevTools:
    Make changes and quickly update the application without restarting whole application. Build->build project or Ctrl+F9
            <dependency>
    			<groupId>org.springframework.boot</groupId>
    			<artifactId>spring-boot-devtools</artifactId>
    			<scope>runtime</scope>
    			<optional>true</optional>
    		</dependency>

========== Refactoring constants ViewNames,Mappings,AttributeNames and creating MessageGenerator =========

    public final class ViewNames {
        private ViewNames(){
        }
        public static final String TEST_FILE ="testFile";
        public static final String REDIRECT_PAGE="redirectPage";
    }
    public final class Mappings {
        private Mappings(){
        }
        public static final String TEST_FILE = "testFile";
        public static final String REDIRECT_PAGE = "redirectPage";
    }
    public final class AttributeNames {
        private AttributeNames(){
        }
        public static final String MAIN_MSG = "mainMessage";
    }

    public interface ServiceInterface {
        String getMainMessage(String username);

        String getResultMessage();
    }
    @Service
    public class ServiceInterImpl implements ServiceInterface{
        private final MessageGenerator messageGenerator;
        @Autowired
        public ServiceInterImpl(MessageGenerator messageGenerator) {
            this.messageGenerator = messageGenerator;
        }
        @Override
        public String getMainMessage(String userName) {
            return messageGenerator.getMainMessage(userName);
        }
        @Override
        public String getResultMessage() {
            return messageGenerator.getResultMessage();
        }
    }
    @Service
    public final class MessageGenerator {
        public String getMainMessage(String userName){
            return "generated main message "+userName;
        }
        public String getResultMessage(){
            return "generated result message";
        }
    }



4.Let's work on Thymeleaf tags and modify the html page,

            testFile.html:

                    <!DOCTYPE html>
                    <html lang="en" xmlns:th=http://www.thymeleaf.org>
                    <head>
                        <meta charset="UTF-8">
                        <title>Home</title>
                    </head>
                    <body>
                     <h1 th:text="${mainMessage}">main message content</h1>
                    <br>
                     <a th:text="redirect" th:href="redirectPage" >Click Here</a>
                    </body>
                    </html>

            DemoController.java:

                   @Controller
                   public class DemoController {
                       private final MessageGenerator messageGenerator;
                       @Autowired
                       public DemoController(MessageGenerator messageGenerator) {
                           this.messageGenerator = messageGenerator;
                       }

                       @GetMapping(Mappings.TEST_FILE)
                       public String testFile(@RequestParam String userName, Model model){                          #1
                           model.addAttribute(AttributeNames.MAIN_MSG,messageGenerator.getMainMessage(userName));
                           return ViewNames.TEST_FILE;
                       }
                   }

#1. The testFile.html needs to display a message( Hello +"UserName"),
    The userName value comes from Request URL, add method argument in the handler method => @RequestParam String userName
    Generate String Value => messageGenerator.getMainMessage(userName)
    Passing the Value to testFile.html, add method argument in the handler method => Model model
    Add a html attribute in testFile.html:   <h1 th:text="${mainMessage}">main message attribute</h1>
    Sending userName to testFile.html, Add the attribute in the model =>
                    model.addAttribute(AttributeNames.MAIN_MSG,messageGenerator.getMainMessage(userName));
                    //AttributeNames.MAIN_MSG = mainMessage


Other Notes:

    <a href="https://github.com/paultimothy12">Click here</a>  -Normal Redirect using <a></a>

    Replacing the text between <a> and </a>,
     <a th:text="LinkEmbeddedText" href="https://github.com/paultimothy12">Click here</a>

    Redirecting LinkEmbeddedText to another viewName,
     <a th:text="LinkEmbeddedText" th:href="redirectPage"></a>

5.Exposing Objects and Variables,(ADD ModelAttributes in DemoController.java)("Java Handler Methods"->"HTML")

    Method 1. ALL .html pages can access

                    @ModelAttribute
                    public TestDatabase testDatabase(){
                        return new TestDatabase();
                    }

    Method 2. Only Particular .html page to access,

                    @GetMapping(Mappings.REDIRECT_PAGE)
                    public String redirectPage(Model model){
                        model.addAttribute("testDatabase",new TestDatabase());
                        return ViewNames.REDIRECT_PAGE;
                    }

    Now in .html file,

            Object:
                    <h4 th:text="${testDatabase}"> this text will be replaced </h4>
            Variables:
                    <h4 th:text="${testDatabase.variableName}"> this text will be replaced </h4>

6.Forms("HTML"->"Java Handler Methods")

            create form in a addDataPage.html file,

                    <!DOCTYPE html>
                    <html lang="en" xmlns:th="http://www.thymeleaf.org">
                    <head>
                        <meta charset="UTF-8">
                        <title>ADD PAGE</title>
                    </head>
                    <body>
                        <div align="center">

                            <h3>ADD DATA</h3>
                            <br>
                            <form action="addDataPage" method="post">                          //#2
                                <label for="serialIN">Enter Serial Number</label>
                                <input id="serialIN" type="number" name="serialNumberName">
                                <label for="contentIN">Enter Content</label>
                                <input id="contentIN" type="text" name="contentName">
                                <input type="submit" value="Submit">
                            </form>
                            <br>


                            <a th:text="EditData" th:href="editDataPage">replaced</a><br>
                            <a th:text="ViewData" th:href="viewDataPage" >replaced</a><br>
                            <a th:text="DeleteData" th:href="deleteDataPage"> replaced</a><br>

                        </div>
                    </body>
                    </html>

#2. action value should be the html page name and method should be post,
            "for" value in label tag should be matched with a input tag with same "id" value,

            Sending the data from html to controller =>
            "name" value from input tag must be matched with argument name in handler methods.

            For example:  <input id="serialIN" type="number" name="serialNumberName">

            in handler methods,
            ADD @RequestParam DataType VariableName => VariableName should be matched with "name" value in input tag.

                @PostMapping(Mappings.ADD_DATA_PAGE)
                public String ADDProcessData(@RequestParam Integer serialNumberName, @RequestParam String contentName) {
                    testDatabase.addTestDataList(serialNumberName, contentName);
                    return ViewNames.ADD_DATA_PAGE;
                }